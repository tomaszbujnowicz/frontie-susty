/**
 * Mixins
 */

/**
 * Clearfix
 * Usage:
   @include clearfix;
 */
@mixin clearfix() {
  &::after {
    display: block;
    clear: both;
    content: "";
  }
}

/**
 * Unstyled keeps list items block level, just removes default browser padding and list-style.
 * Usage:
   @include list-none;
 */
@mixin list-unstyled {
  list-style: none;
  padding-left: 0;
}

/**
 * Overlay
 * Usage
   @include overlay();
 */
@mixin overlay() {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

/**
 * Pseudo elements after / before
 * Usage
   @include pseudo;
 */
@mixin pseudo($display: block, $position: absolute, $content: ''){
  content: $content;
  display: $display;
  position: $position;
}

/**
 * Set max width for an element and make it centered
 * Usage
   @include max-width(600px);
 */
@mixin max-width($max-width) {
  max-width: $max-width;
  margin-right: auto;
  margin-left: auto;
}

/**
  * https://github.com/nicholasruggeri/px-to-rem-sass-mixin
  * Usage
  font-size: rem(20)
  margin: rem(40) rem(40);
 */
@function strip-units($value) {
  @return ($value / ($value * 0 + 1));
}
@function rem($pxval) {
  @if not unitless($pxval) {
    $pxval: strip-units($pxval);
  }
  $base: 16px;
  @if not unitless($base) {
    $base: strip-units($base);
  }
  @return ($pxval / $base) * 1rem;
}

/**
 * Responsive font size for different media query breakpoints
 * Usage
   @include responsive-font-size(12px, 14px, 16px, 18px, 20px);
   @include responsive-font-size(xs, sm, md, lg, xl);

 * In case you want to omit the media query breakpoint please use ''
   e.g. @include responsive-font-size(12px, '', '', '', 20px);
 */
@mixin responsive-font-size($font-size-xs: null, $font-size-sm: null, $font-size-md: null, $font-size-lg: null, $font-size-xl: null) {
  @if ($font-size-xs != '') {
    font-size: $font-size-xs;
  }
  @if ($font-size-sm != '') {
    @include media-breakpoint-up(sm) {
      font-size: $font-size-sm;
    }
  }
  @if ($font-size-md != '') {
    @include media-breakpoint-up(md) {
      font-size: $font-size-md;
    }
  }
  @if ($font-size-lg != '') {
    @include media-breakpoint-up(lg) {
      font-size: $font-size-lg;
    }
  }
  @if ($font-size-xl != '') {
    @include media-breakpoint-up(xl) {
      font-size: $font-size-xl;
    }
  }
}

/**
 * Responsive spacing for different media query breakpoints
 * Usage
   @include responsive-space('mb', 10px, 20px, 30px, 40px, 50px);
   @include responsive-space('type, xs, sm, md, lg, xl);

 * In case you want to omit the media query breakpoint please use ''
   e.g. @include responsive-space('mb', 10px, '', '', 40px, 50px);

   Type:

   m  : margin
   mt : margin-top
   mr : margin-right
   mb : margin-bottom
   ml : margin-left
   mx : (horizontal) margin-left and margin-right
   my : (vertical) margin-top and margin bottom

   p  : padding
   pt : padding-top
   pr : padding-right
   pb : padding-bottom
   pl : padding-left
   px : (horizontal) padding-left and padding-right
   py : (vertical) padding-top and padding bottom
 */
@mixin responsive-space($type: null, $space-xs: null, $space-sm: null, $space-md: null, $space-lg: null, $space-xl: null, $type_1: null, $type_2: null) {
  @if ($type == 'm') {
    $type: 'margin';
  }
  @if ($type == 'mt') {
    $type: 'margin-top';
  }
  @if ($type == 'mr') {
    $type: 'margin-right';
  }
  @if ($type == 'mb') {
    $type: 'margin-bottom';
  }
  @if ($type == 'ml') {
    $type: 'margin-left';
  }
  @if ($type == 'mx') {
    $type_1: 'margin-left';
    $type_2: 'margin-right';
  }
  @if ($type == 'my') {
    $type_1: 'margin-top';
    $type_2: 'margin-bottom';
  }

  @if ($type == 'p') {
    $type: 'padding';
  }
  @if ($type == 'pt') {
    $type: 'padding-top';
  }
  @if ($type == 'pr') {
    $type: 'padding-right';
  }
  @if ($type == 'pb') {
    $type: 'padding-bottom';
  }
  @if ($type == 'pl') {
    $type: 'padding-left';
  }
  @if ($type == 'px') {
    $type_1: 'padding-left';
    $type_2: 'padding-right';
  }
  @if ($type == 'py') {
    $type_1: 'padding-top';
    $type_2: 'padding-bottom';
  }

  @if ( ($type == 'mx') or ($type == 'my') or ($type == 'py') or ($type == 'px') ) {
    @if ($space-xs != '') {
      #{$type_1}: $space-xs;
      #{$type_2}: $space-xs;
    }
    @if ($space-sm != '') {
      @include media-breakpoint-up(sm) {
        #{$type_1}: $space-sm;
        #{$type_2}: $space-sm;
      }
    }
    @if ($space-md != '') {
      @include media-breakpoint-up(md) {
        #{$type_1}: $space-md;
        #{$type_2}: $space-md;
      }
    }
    @if ($space-lg != '') {
      @include media-breakpoint-up(lg) {
        #{$type_1}: $space-lg;
        #{$type_2}: $space-lg;
      }
    }
    @if ($space-xl != '') {
      @include media-breakpoint-up(xl) {
        #{$type_1}: $space-xl;
        #{$type_2}: $space-xl;
      }
    }
  } @else {
    @if ($space-xs != '') {
      #{$type}: $space-xs;
    }
    @if ($space-sm != '') {
      @include media-breakpoint-up(sm) {
        #{$type}: $space-sm;
      }
    }
    @if ($space-md != '') {
      @include media-breakpoint-up(md) {
        #{$type}: $space-md;
      }
    }
    @if ($space-lg != '') {
      @include media-breakpoint-up(lg) {
        #{$type}: $space-lg;
      }
    }
    @if ($space-xl != '') {
      @include media-breakpoint-up(xl) {
        #{$type}: $space-xl;
      }
    }
  }
}

/**
 * Responsive size for different media query breakpoints
 * Usage
   @include responsive-size('h', 10px, 20px, 30px, 40px, 50px);
   @include responsive-size('type, xs, sm, md, lg, xl);

 * In case you want to omit the media query breakpoint please use ''
   e.g. @include responsive-size('h', 10px, '', '', 40px, 50px);

   Type:

   h    : height,
   minh : min-height,
   maxh : max-height,
   w    : width,
   minw : min-width,
   maxw : max-width
 */
@mixin responsive-size($type: null, $size-xs: null, $size-sm: null, $size-md: null, $size-lg: null, $size-xl: null) {
  @if ($type == 'h') {
    $type: 'height';
  }
  @if ($type == 'w') {
    $type: 'width';
  }
  @if ($type == 'minh') {
    $type: 'min-height';
  }
  @if ($type == 'minw') {
    $type: 'min-width';
  }
  @if ($type == 'maxh') {
    $type: 'max-height';
  }
  @if ($type == 'maxw') {
    $type: 'max-width';
  }
  @if ($size-xs != '') {
    #{$type}: $size-xs;
  }
  @if ($size-sm != '') {
    @include media-breakpoint-up(sm) {
      #{$type}: $size-sm;
    }
  }
  @if ($size-md != '') {
    @include media-breakpoint-up(md) {
      #{$type}: $size-md;
    }
  }
  @if ($size-lg != '') {
    @include media-breakpoint-up(lg) {
      #{$type}: $size-lg;
    }
  }
  @if ($size-xl != '') {
    @include media-breakpoint-up(xl) {
      #{$type}: $size-xl;
    }
  }
}

/**
 * Responsive ratio
 * Usage:
   @include responsive-ratio(16,9);
   @include responsive-ratio(4,3);
 */
@mixin responsive-ratio($x,$y, $pseudo: false) {
  $padding: unquote(($y / $x) * 100 + '%');
  @if $pseudo {
    &:before {
      @include pseudo($pos: relative);
      width: 100%;
      padding-top: $padding;
    }
  } @else {
    padding-top: $padding;
  }
}

/**
 * Triangle
 * Usage:
   @include css-triangle(red, up, 20px);
   @include css-triangle(red, down);
 */
@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false){
  content: '';
  display: block;
  position: $position;
  width: 0;
  height: 0;
  @if $round {
    border-radius: 3px;
  }
  @if $direction == down {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
    margin-top: 0 - round($size / 2.5);
  } @else if $direction == up {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
    margin-bottom: 0 - round($size / 2.5);
  } @else if $direction == right {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
    margin-right: -$size;
  } @else if  $direction == left {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
    margin-left: -$size;
  }
}
